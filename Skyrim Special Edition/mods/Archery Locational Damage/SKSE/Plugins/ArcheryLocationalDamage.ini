; Used for version control. Do not modify.
[Version]
Major = 2
Minor = 1

[Settings]
; Show body part name hit by an arrow. (Use when defining a location rule)
; Also show a player part hit by an enemy in console
DebugNotification = false

; Show message when an enemy hits the player.
PlayerHitNotification = true

; Play hit sound when an enemy hits the player
PlayerHitSound = true

; Hit notification mode
; 0 = Off
; 1 = Floating Text (Will use screen mode if "Floating Damage" mod is not available)
; 2 = Screen notification
; 3 = Both
HitNotificationMode = 1

; Shot difficulty notification mode
EXPNotificationMode = 3

; Show hit effect applied as a floating notification (Cannot be used in screen notification mode)
HitEffectNotification = true

; Show floating hit message for NPC vs NPC
NPCHitNotification = true

; Exclude these nodes from detection
LocationExclude = 

; First person nodes to check. (Player only)
; Because all of body part in first person do not have a collision object, we need to define a rule for it here otherwise it won't work on when the player is hit by an arrow.
PlayerNodeInclude = .*(Head|Neck|Arm|Forearm|Calf|Thigh).*

; The damage must be at least HPFactor percentage of target max HP to proc the effect at their maximum chance.
; Set this to 0 to disable it entirely, making every hit proccing its effect at their maximum chance.
HPFactor = 25

; If HP factor cap is set to false then an effect with 25% chance can proc at higher than 25% if the damage exceed the HP factor.
HPFactorCap = true

; Amplify game on hit effects such as enchantments and perks
; Will lower the enchantment power if the multiplier is lower than 1 or block it completely if the multiplier is 0
AmplifyEnchantment = true

FloatingTextOffsetX = 0
FloatingTextOffsetY = 0.04

; Ignore hitbox test to allow hit test against nodes without a hitbox. May result in inaccurate hit test. USE AT YOUR OWN RISK.
IgnoreHitboxCheck = false

; Shot difficulty EXP bonus related.
[Experience]
; Enable EXP bonus equals to the damage multipler on the hit location unless overridden by Difficulty = x option.
EnableLocationMultiplier = true

; Enable EXP bonus based on how hard to land a shot on the target
; Factors include flight time, distance, target movement direction, target size, target speed and flying state
; Difficulty based EXP bonus from a moving target will be large when the target is moving perpendicular to you
; But will be very small when the target is running toward or away from you
; This setting is separate from location multiplier. If you want to disable all EXP multiplier then disable both options.
EnableDifficultyBonus = true

; How much of the flight time of an arrow will affect the EXP bonus
ShotDifficultyTimeFactor = 1

; How much of the arrow travel distance will affect the EXP bonus
ShotDifficultyDistFactor = 1

; How much of the target movement will affect the EXP bonus
ShotDifficultyMoveFactor = 1

; Maximum amount of EXP gained when doing difficult shots (Displayed shot difficulty is not affected)
ShotDifficultyMax = 100

; Minimum shot difficulty to start reporting
ShotDifficultyReportMin = 1.1

; Hit locations are defined here
; Lower number will take priority over the one with higher number
; These are used for anything from player to dragon

; Example location: Display "Bolt Hit!" message for all hits from bolt and continue to process other location.
[Location0]
; If Regexp is not set then this location will be disabled.
;Regexp = .*
MessageFloating = Bolt Hit!

; Ammo type filtering (will default to both if not defined)
; 0 = Both
; 1 = Arrow
; 2 = Bolt
AmmoType = 2

; This filter will success when shooter is using an enhanced crossbow and a dwarven bolt
;KeywordInclude = W:DLC1CrossbowIsEnhanced, W:VendorItemArrow+WeapMaterialDwarven

; If Continue is set to true, the other location after this one will continue to process instead of exiting after applying their effects.
; If more than one location match the filter then damage multipliers will be stacking multiplicatively.
; Other overriding properties such as ImpactData or Deflect will be override by last triggered location.
; Other property not noted here will be stacking additively.
Continue = true

; Example of using the target's editor ID instead of keywords
[Location00]
;Regexp = .*
MessageFloating = Mudcrab Hit!

; Use regular expression for editor ID
EditorID = .*Mudcrab.*
Continue = true

; Example of compound keyword filter
; Target is immune to arrow when it's wearing full heavy armor and having Dragon Hide spell active.(Master alteration spell)
[Location000]
; This is for example only, uncomment the line below if you want to enable it anyway.
;Regexp = .*
MessageFloating = Immune!

; By joining keywords with plus sign(s), a single armor piece or a single spell effect must have all of the keywords joined by plus sign(s).
; Line below require the target to wear full heavy armor and have the Dragon Hide spell active. (Dragon Hide spell has both keywords)
;KeywordInclude = M:MagicArmorSpell+RitualSpellEffect, E:ArmorHeavy+ArmorCuirass, E:ArmorHeavy+ArmorHelmet, E:ArmorHeavy+ArmorGauntlets, E:ArmorHeavy+ArmorBoots

; If the keywords are not joined by plus sign(s) then multiple armor pieces can contribute to the keyword filter.
; Line below require only a piece of heavy armor but still need to wear full armor set and have the Dragon Hide spell active.
;KeywordInclude = M:MagicArmorSpell+RitualSpellEffect, E:ArmorHeavy, E:ArmorCuirass, E:ArmorHelmet, E:ArmorGauntlets, E:ArmorBoots

; Another alternative is by using multiple duplicate keywords to match multiple pieces. (Must be wearing 4 heavy armor pieces)
;KeywordInclude = M:MagicArmorSpell+RitualSpellEffect, E:ArmorHeavy, E:ArmorHeavy, E:ArmorHeavy, E:ArmorHeavy

; Condition from perk can also be used as a filter by using perk name in UsePerkCondition option. Perk condition must be created by using the creation kit and loaded as a plugin.
UsePerkCondition = ALDConditionImmune

Multiplier = 0
HitSound = WPNImpactBladeVsArmorSD
ImpactData = WPNArrowVsMetalImpact
Deflect = true

[Location1]
; Regular expression to match body part's name
Regexp = .*(Head|Eye|Nose|Jaw|HEAD).*

; Message to notify when arrow hits this location
Message = Headshot against a helmet!

; Floating message override (Will use normal message if left blank)
MessageFloating = Helmet shot!

; Use editor ID for hit sound
HitSound = WPNImpactBladeVsArmorSD

; Damage multiplier based on final damage after all bonus and defense calculation (Default = 1.0)
Multiplier = 1.5

; Override shot difficult on this location by this value (Will use damage multiplier if not set. Cannot be less than one)
Difficulty = 2

; If success chance is not set then this location will always success
SuccessChance = 50

; Success chance can be lowered with incoming damage compared to target max HP percentage.  (Default = 0)
; Negative value mean the success chance will be higher with lower damage
SuccessHPFactor = -10

; If success chance is set to false then the success chance will also scaled up with damage that exceed HP factor (Default = true)
SuccessHPFactorCap = false

; Will deflect incoming projectile if set to true. (Does not negate damage, set the multiplier to 0 if you want to negate the damage entirely)
Deflect = true

; Impact data overriding for current location (Hitspark)
ImpactData = WPNArrowVsMetalImpact

; Color of floating text when the player hits an enemy (Default = 0xFF8000)
FloatingColorEnemy = 0xFF8000

; Color of floating text when an enemy hits the player (Default = 0xFF4040)
FloatingColorSelf = 0xFF4040

; Text size (Default = 24)
FloatingTextSize = 24

; Target sex filtering. (M = Male, F = Female, Blank or undefined = both)
; Do not use this for animal because the game tag them as male by default
Sex = 

; Define what keyword to exclude and include for this location here. Leave blank or delete it if not enforcing any keyword matching. (Look for these in the editor)
; A keyword prefixed with "A": Target actor including its race must have all keywords in this list. (A = Actor)
; A keyword prefixed with "E": Target's equipped items must have all keywords in this list. (E = Equipment)
; A keyword prefixed with "M": An active magic effect on the target must have all keywords in this list. (M = Magic)
; A keyword prefixed with "W": A weapon(including ammo) the victim is attacked with must have all keywords in this list. (W = Weapon)
; Using multiple keywords in a single line means the location must match ALL of the keywords specified. (Logical AND)
; Using multiple KeywordInclude lines means the location must match at least ONE of the KeywordInclude line. (Logical OR)
; The keyword can be negated by prefixing it with a minus sign to match it with the target that does NOT have the keyword.
; For example: Using "M:-MagicArmorSpell" means the magic effect must NOT have MagicArmorSpell keyword.
KeywordInclude = E:ArmorHelmet+ArmorHeavy

; A single active magic effect on the target must have all keywords if joined with plus sign(s).
; Magic armor keywords (Dragon Hide)
KeywordInclude = M:MagicArmorSpell+RitualSpellEffect

; Additional effects on hit for Location1. Any spell from loaded mods can be used. There's no limit on how many of these can be set.
; Use editor ID for Spell, Enchantment and Potion in here. ("Magic Effect" does not work here despite its name because its duration and magnitude are not yet defined)
; Avoid using spells with infinite duration
Effect = 35% ALDStagger
Effect = 15% ALDKnockdown

; Uncomment lines below if you want to have a chance of paralyze on hit (This is rather overpowered so it's disabled by default)
;Effect = 15% ALDParalyze

[Location2]
Regexp = .*(Head|Eye|Nose|Jaw|HEAD).*
Message = Headshot!
HitSound = UISneakAttack
Multiplier = 2.0
Effect = 50% ALDStagger
Effect = 25% ALDKnockdown
;Effect = 15% ALDParalyze

; Heavy armor protected neck
[Location10]
Regexp = .*(Neck).*
;MessageFloating = Deflected: Neck
HitSound = WPNImpactBladeVsArmorSD
Multiplier = 1.2
Difficulty = 1.5
SuccessChance = 50
SuccessHPFactor = -10
SuccessHPFactorCap = false
Deflect = true
ImpactData = WPNArrowVsMetalImpact

KeywordInclude = E:ArmorHeavy+ArmorCuirass
KeywordInclude = E:ArmorHeavy+ArmorHelmet
KeywordInclude = M:MagicArmorSpell+RitualSpellEffect

; Dragon, machine and undead should not have a weak point on the neck, exclude them (Dragon due to sturdy neck, undead and machine due to not being alive)
KeywordExclude = A:ActorTypeDragon
KeywordExclude = A:ActorTypeDwarven
KeywordExclude = A:ActorTypeUndead

; By default, this bleeding effect will not affect undead and machines, even with the keyword exclusion above deleted. (The condition is set on the magic effect)
Effect = 50% ALDBleeding

; Light armor protected neck
[Location11]
Regexp = .*(Neck).*
;MessageFloating = Reduced: Neck
Multiplier = 1.35
Difficulty = 1.5
SuccessChance = 35
SuccessHPFactor = -10
SuccessHPFactorCap = false

KeywordInclude = E:ArmorLight+ArmorCuirass
KeywordInclude = E:ArmorLight+ArmorHelmet

; Magic armor non-ritual spell version. Prefix a keyword with a minus to negate it.
; This magic effect must have the MagicArmorSpell keyword but must NOT have the RitualSpellEffect keyword.
; This is done to prevent the ritual spell version from trying to trigger the light armor effect in addition to the heavy armor effect.
KeywordInclude = M:MagicArmorSpell+-RitualSpellEffect

KeywordExclude = A:ActorTypeDragon
KeywordExclude = A:ActorTypeDwarven
KeywordExclude = A:ActorTypeUndead

Effect = 75% ALDBleeding

; Unprotected neck
[Location12]
Regexp = .*(Neck).*
;MessageFloating = Neck
HitSound = UISneakAttack
Multiplier = 1.5

KeywordExclude = A:ActorTypeDragon
KeywordExclude = A:ActorTypeDwarven
KeywordExclude = A:ActorTypeUndead

Effect = 10000% ALDBleeding
;Effect = 10% ALDParalyze

; Heavy gauntlets
[Location20]
Regexp = .*(Arm|Forearm|Hand).*
HitSound = WPNImpactBladeVsArmorSD
Multiplier = 0.75
SuccessChance = 50
SuccessHPFactor = -10
SuccessHPFactorCap = false
Deflect = true
ImpactData = WPNArrowVsMetalImpact
;Message = Deflect: Gaunlets
;MessageFloating = Deflected: Gaunlets

KeywordInclude = E:ArmorHeavy+ArmorGauntlets
KeywordInclude = M:MagicArmorSpell+RitualSpellEffect

Effect = 50% ALDDrainOffensive
Effect = 5% ALDDisarm
Effect = 5% ALDSilence

; Light gauntlets
[Location21]
Regexp = .*(Arm|Forearm|Hand).*
Multiplier = 0.85
SuccessChance = 35
SuccessHPFactor = -10
SuccessHPFactorCap = false
ImpactData = WPNArrowVsMetalImpact
;MessageFloating = Reduced: Gauntlets
;Message = Reduce: Gauntlets

KeywordInclude = E:ArmorLight+ArmorGauntlets
KeywordInclude = M:MagicArmorSpell+-RitualSpellEffect

Effect = 75% ALDDrainOffensive
Effect = 10% ALDDisarm
Effect = 10% ALDSilence

; Unprotected hands
[Location22]
Regexp = .*(Arm|Forearm|Hand).*
;MessageFloating = Arms
Multiplier = 1

; Use a regular expression to match the target race. More than one of these can be used.
; Exclude this race
RaceExclude = .*DragonRace

; Include this race (Blank = no race filtering)
RaceInclude = 

; You can use this instead of race filter above because the DragonRace also has the ActorTypeDragon keyword
;KeywordExclude = A:ActorTypeDragon

Effect = 10000% ALDDrainOffensive
Effect = 15% ALDDisarm
Effect = 15% ALDSilence

; Heavy boots
[Location30]
Regexp = .*(Calf|Thigh|Leg|Upperleg|Lowerleg).*
;MessageFloating = Deflected: Boots
HitSound = WPNImpactBladeVsArmorSD
Multiplier = 0.75
SuccessChance = 50
SuccessHPFactor = -10
SuccessHPFactorCap = false
Deflect = true
ImpactData = WPNArrowVsMetalImpact

KeywordInclude = E:ArmorHeavy+ArmorBoots
KeywordInclude = M:MagicArmorSpell+RitualSpellEffect

Effect = 50% ALDSlow
Effect = 15% ALDStagger

; Light boots
[Location31]
Regexp = .*(Calf|Thigh|Leg|Upperleg|Lowerleg).*
;MessageFloating = Reduced: Boots
Multiplier = 0.85
SuccessChance = 35
SuccessHPFactor = -10
SuccessHPFactorCap = false
ImpactData = WPNArrowVsMetalImpact

KeywordInclude = E:ArmorLight+ArmorBoots
KeywordInclude = M:MagicArmorSpell+-RitualSpellEffect

Effect = 75% ALDSlow
Effect = 25% ALDStagger

; Unprotected legs
[Location32]
Regexp = .*(Calf|Thigh|Leg|Upperleg|Lowerleg).*
;MessageFloating = Legs
Multiplier = 1.0

Effect = 10000% ALDSlow
Effect = 35% ALDStagger

; Heavy cuirass - Complete deflection
[Location40]
Regexp = .*(Spine|COM).*
MessageFloating = Blocked: Cuirass
HitSound = WPNImpactBladeVsArmorSD
Multiplier = 0
SuccessChance = 15
SuccessHPFactor = -10
SuccessHPFactorCap = true
Deflect = true
ImpactData = WPNArrowVsMetalImpact

KeywordInclude = E:ArmorHeavy+ArmorCuirass
KeywordInclude = M:MagicArmorSpell+RitualSpellEffect

; Heavy cuirass - Partial deflection
[Location41]
Regexp = .*(Spine|COM).*
;MessageFloating = Deflected: Cuirass
HitSound = WPNImpactBladeVsArmorSD
Multiplier = 0.5
SuccessChance = 50
SuccessHPFactor = -10
SuccessHPFactorCap = false
Deflect = true
ImpactData = WPNArrowVsMetalImpact

KeywordInclude = E:ArmorHeavy+ArmorCuirass
KeywordInclude = M:MagicArmorSpell+RitualSpellEffect

; Light cuirass
[Location42]
Regexp = .*(Spine|COM).*
;MessageFloating = Reduced: Cuirass
Multiplier = 0.75
SuccessChance = 35
SuccessHPFactor = -10
SuccessHPFactorCap = false
ImpactData = WPNArrowVsMetalImpact

KeywordInclude = E:ArmorLight+ArmorCuirass
KeywordInclude = M:MagicArmorSpell+-RitualSpellEffect

; Shield complete deflection
[Location50]
Regexp = .*SHIELD.*
MessageFloating = Blocked: Shield
HitSound = WPNImpactArrowVsShieldHeavySD
Multiplier = 0
SuccessChance = 50
SuccessHPFactor = -10
SuccessHPFactorCap = true
Deflect = true
ImpactData = WPNArrowVsMetalImpact

KeywordInclude = E:ArmorShield

; Define your own location here