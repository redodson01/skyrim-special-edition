[General]
gameName=SkyrimSE
modid=32444
ignoredVersion=
version=11.0.0.0
newestVersion=11.0.0.0
category="32,"
nexusFileStatus=1
installationFile=All in one Address Library (Anniversary Edition)-32444-11-1707902394.zip
repository=Nexus
comments=
notes=
nexusDescription="[color=#ff6060][size=5][b]IMPORTANT![/b] This is now split into 2 versions: Special Edition (1.5.x) and Anniversary Edition (1.6.x). The IDs that point to addresses will not match between those 2 versions (the game executable is too different to match, and even if they matched the code within those functions is different anyway).[/size][/color]\n<br />\n<br />[color=#ff7700][size=4][b]Description[/b][/size][/color]\n<br />\n<br />[b]For regular mod users:[/b] Download and install the \"all-in-one\" package from files section. You can use mod manager or do it manually. The .bin files should go here:\n<br />[b]Data/SKSE/Plugins/[/b]\n<br />There is no need for you to read the rest of any of this.\n<br />\n<br />[b]For SKSE DLL plugin authors:[/b]\n<br />This is a modder resource (a header file). You can load a database that stores offsets so your DLL plugin can be version independent without requiring to be recompiled. The header file can be downloaded from the optional section of the files. For Anniversary Edition the header file is called versionlibdb.h instead of versiondb.h! If you are using CommonLib then all of this is already built in and you don't need anything from here.\n<br />\n<br />\n<br />[color=#ff7700][size=4][b]How to use[/b][/size][/color]\n<br />\n<br />The quickest way:\n<br />[spoiler]\n<br />[code]\n<br />#include \"versiondb.h\"\n<br />\n<br />void * MyAddress = NULL;\n<br />unsigned long long MyOffset = 0;\n<br />\n<br />bool InitializeOffsets()\n<br />{\n<br />   // Allocate on stack so it will be unloaded when we exit this function.\n<br />   // No need to have the whole database loaded and using up memory for no reason.\n<br />   VersionDb db;\n<br />\n<br />   // Load database with current executable version.\n<br />   if (!db.Load())\n<br />   {\n<br />      _FATALERROR(\"Failed to load version database for current executable!\");\n<br />      return false;\n<br />   }\n<br />   else\n<br />   {\n<br />      // \"SkyrimSE.exe\", \"1.5.97.0\"\n<br />      _MESSAGE(\"Loaded database for %s version %s.\", db.GetModuleName().c_str(), db.GetLoadedVersionString().c_str());\n<br />   }\n<br />\n<br />   // This address already includes the base address of module so we can use the address directly.\n<br />   MyAddress = db.FindAddressById(123);\n<br />   if (MyAddress == NULL)\n<br />   {\n<br />      _FATALERROR(\"Failed to find address!\");\n<br />      return false;\n<br />   }\n<br />\n<br />   // This offset does not include base address. Actual address would be ModuleBase + MyOffset.\n<br />   if (!db.FindOffsetById(123, MyOffset))\n<br />   {\n<br />      _FATALERROR(\"Failed to find offset for my thing!\");\n<br />      return false;\n<br />   }\n<br />\n<br />   // Everything was successful.\n<br />   return true;\n<br />}\n<br />[/code]\n<br />[/spoiler]\n<br />\n<br />Now you're wondering what is that \"123\" value there. This is the ID of an address. Different version databases will have the same ID for an address but it may point to different values. To get a list of all ID and value pair for a specific version do this:\n<br />\n<br />[spoiler]\n<br />[code]\n<br />#include \"versiondb.h\"\n<br />\n<br />bool DumpSpecificVersion()\n<br />{\n<br />   VersionDb db;\n<br />\n<br />   // Try to load database of version 1.5.62.0 regardless of running executable version.\n<br />   if (!db.Load(1, 5, 62, 0))\n<br />   {\n<br />      _FATALERROR(\"Failed to load database for 1.5.62.0!\");\n<br />      return false;\n<br />   }\n<br />\n<br />   // Write out a file called offsets-1.5.62.0.txt where each line is the ID and offset.\n<br />   db.Dump(\"offsets-1.5.62.0.txt\");\n<br />   _MESSAGE(\"Dumped offsets for 1.5.62.0\");\n<br />   return true;\n<br />}\n<br />[/code]\n<br />[/spoiler]\n<br />\n<br />Instead of 1, 5, 62, 0 put the version you are reversing and familiar with. You must have the corresponding database file in /Data/SKSE/Plugins directory first.\n<br />\n<br />After you call this you should have a new file in the main Skyrim directory called \"offsets-1.5.62.0.txt\" or whatever you put as the file name. It will be in the format where each line is:\n<br />Decimal ID&lt;tab&gt;Hex Offset&lt;newline&gt;\n<br />\n<br />For example if you have an address 142F4DEF8 (player character static pointer) in 1.5.62.0 that you want to make version independent you would do this:\n<br />1. Look up 2F4DEF8 in the offsets file. Because this is the offset without the base 140000000\n<br />2. See that the ID is 517014 (decimal!)\n<br />3. If you want this address in your DLL at runtime do this:\n<br />\n<br />[code]\n<br />void* addressOf142F4DEF8 = db.FindAddressById(517014);\n<br />[/code]\n<br />\n<br />And there you have it.\n<br />\n<br />The VersionDb struct has the following functions:\n<br />[spoiler]\n<br />[code]\n<br />bool Dump(const std::string&amp; path); // Dump currently loaded database to file\n<br />bool Load(int major, int minor, int revision, int build); // Load a specific version if the db-major-minor-revision-build.bin exists in Data/SKSE/Plugins directory\n<br />bool Load(); // Load the version for current application\n<br />void Clear(); // Clear currently loaded database\n<br />void GetLoadedVersion(int&amp; major, int&amp; minor, int&amp; revision, int&amp; build) const; // Get the version of database file we have loaded right now\n<br />bool GetExecutableVersion(int&amp; major, int&amp; minor, int&amp; revision, int&amp; build) const; // Get the version of currently executing application\n<br />const std::string&amp; GetModuleName() const; // Get the name of currently loaded database module, this should show \"SkyrimSE.exe\"\n<br />const std::string&amp; GetLoadedVersionString() const; // Get the currently loaded version as string, e.g. \"1.5.62.0\"\n<br />const std::map&lt;unsigned long long, unsigned long long&gt;&amp; GetOffsetMap() const; // Get the map of ID to offset if you need to iterate it manually\n<br />void* FindAddressById(unsigned long long id) const; // Find address by ID, this will already include base and be correct address. It will return NULL if not found!\n<br />bool FindOffsetById(unsigned long long id, unsigned long long&amp; result) const; // Find offset by ID, this will just be offset without base included.\n<br />bool FindIdByAddress(void* ptr, unsigned long long&amp; result) const; // Find ID by address, this will attempt a reverse lookup to convert address to ID\n<br />bool FindIdByOffset(unsigned long long offset, unsigned long long&amp; result) const; // Find ID by offset, this will attempt a reverse lookup to convert offset to ID\n<br />[/code]\n<br />[/spoiler]\n<br />\n<br />Things you should know and keep in mind:\n<br />\n<br />1. You can include any (or all) of the database files with your plugin but it may increase the file size considerably (by around 2.5 mb). So far it has been common to mark this mod as a dependency instead.\n<br />\n<br />2. You should ALWAYS only load database once at startup, initialize/cache the addresses you need and let it unload. Unloading just means the VersionDb struct gets deleted or lost (if you allocated on stack). This will make sure you don't use unnecessary amount of memory during game runtime. There's no need to keep the database loaded during gameplay. This is a moot point if you use CommonLib as it only loads it once instead of for each DLL.\n<br />\n<br />3. The database contains addresses of functions, global variables, RTTI, vtables, and anything else that may have a reference to it. It does not contain addresses that are in the middle of functions or middle of globals. If you need an address in the middle of the function you should look up the function base address and add the extra offset yourself. It also does not contain useless stuff such as alignment around functions (which are referenced in rdata), pdata section is discarded and some compiler generated SEH info from rdata is discarded.\n<br />\n<br />4. You should always check the result to make sure the database loaded successfully (bool Load returned true) and that the addresses queried actually returned a valid result (not NULL). If it does fail to load it means the file was missing most likely or wrong version (e.g. trying to use SE header in AE). If the query fails it means the address could not be found in that version. This could mean either the game code changed enough that the address is no longer at all valid for that version OR the database itself failed to detect the correct address. If either of those things happen you should fail the plugin initialization to let SKSE know you did not load correctly. Or manually show an error message.\n<br />\n<br />5. It would also be best if you checked to make sure the address exists in all versions of the game before publishing your DLL plugin. To do that load each version of the database file and query the same address ID in each of them to make sure it exists:\n<br />[spoiler]\n<br />[code]\n<br />bool LoadAll(std::vector&lt;VersionDb*&gt;&amp; all)\n<br />{\n<br />   static int versions[] = { 3, 16, 23, 39, 50, 53, 62, 73, 80, 97, -1 };\n<br />   for (int i = 0; versions[i] &gt;= 0; i++)\n<br />   {\n<br />      VersionDb * db = new VersionDb();\n<br />      if (!db-&gt;Load(1, 5, versions[i], 0))\n<br />      {\n<br />         delete db;\n<br />         return false;\n<br />      }\n<br />      all.push_back(db);\n<br />   }\n<br />   return true;\n<br />}\n<br />\n<br />bool ExistsInAll(std::vector&lt;VersionDb*&gt;&amp; all, unsigned long long id)\n<br />{\n<br />   unsigned long long result = 0;\n<br />   for (auto db : all)\n<br />   {\n<br />      if (!db-&gt;FindOffsetById(id, result))\n<br />         return false;\n<br />   }\n<br />   return true;\n<br />}\n<br />\n<br />void FreeAll(std::vector&lt;VersionDb*&gt;&amp; all)\n<br />{\n<br />   for (auto db : all)\n<br />      delete db;\n<br />   all.clear();\n<br />}\n<br />\n<br />bool IsOk()\n<br />{\n<br />   std::vector&lt;VersionDb*&gt; all;\n<br />   if (!LoadAll(all))\n<br />   {\n<br />      _FATALERROR(\"Failed to load one or more version databases for current executable!\");\n<br />      FreeAll(all);\n<br />      return false;\n<br />   }\n<br />\n<br />   if (!ExistsInAll(all, 517014))\n<br />   {\n<br />      _FATALERROR(\"517014 does not exist in all versions of the database!\");\n<br />      FreeAll(all);\n<br />      return false;\n<br />   }\n<br />\n<br />   FreeAll(all);\n<br />   // Ok!\n<br />   return true;\n<br />}\n<br />[/code]\n<br />[/spoiler]\n<br />\n<br />This way you can be sure your DLL mod will work in all versions, or if it does not work in some versions you can write that on your mod page.\n<br />\n<br />6. Sometimes you'll need to do something different based on running game version. You can do that with this code snippet:\n<br />[spoiler]\n<br />[code]\n<br />int major = 0, minor = 0, revision = 0, build = 0;\n<br />if (!db.GetExecutableVersion(major, minor, revision, build))\n<br />{\n<br />   _FATALERROR(\"Something went wrong!\");\n<br />   return false;\n<br />}\n<br />\n<br />// Running game is 1.5.x and at least version 1.5.39.0\n<br />if (major == 1 &amp;&amp; minor == 5 &amp;&amp; revision &gt;= 39)\n<br />{\n<br />   // Stuff ... ?\n<br />}\n<br />[/code]\n<br />[/spoiler]\n<br />\n<br />7. Please keep in mind: if you compile your SKSE DLL in debug mode the load time of database can be around 14 seconds! In release mode this is around 0.2 seconds. This is due to standard library containers being very slow in that mode (std map).\n<br />\n<br />\n<br />[color=#ff7700][size=4][b]Permissions[/b][/size][/color]\n<br />\n<br />Do whatever you want."
url=
hasCustomURL=false
lastNexusQuery=2025-09-16T14:36:58Z
lastNexusUpdate=2025-09-16T14:36:58Z
nexusLastModified=2024-02-14T09:19:54Z
nexusCategory=82
converted=false
validated=false
color=@Variant(\0\0\0\x43\0\xff\xff\0\0\0\0\0\0\0\0)
endorsed=0
tracked=0

[installedFiles]
1\modid=32444
size=1
1\fileid=470707
